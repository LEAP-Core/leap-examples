// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.1
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
//
// ===========================================================


(* CORE_GENERATION_INFO="hls_axi_bus_test,hls_ip_2015_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7vx485tffg1761-2,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=2141,HLS_SYN_TPT=none,HLS_SYN_MEM=1,HLS_SYN_DSP=0,HLS_SYN_FF=781,HLS_SYN_LUT=1104}" *)

module hls_axi_bus_test (
        ap_clk,
        ap_rst_n,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_mem0_AWVALID,
        m_axi_mem0_AWREADY,
        m_axi_mem0_AWADDR,
        m_axi_mem0_AWID,
        m_axi_mem0_AWLEN,
        m_axi_mem0_AWSIZE,
        m_axi_mem0_AWBURST,
        m_axi_mem0_AWLOCK,
        m_axi_mem0_AWCACHE,
        m_axi_mem0_AWPROT,
        m_axi_mem0_AWQOS,
        m_axi_mem0_AWREGION,
        m_axi_mem0_AWUSER,
        m_axi_mem0_WVALID,
        m_axi_mem0_WREADY,
        m_axi_mem0_WDATA,
        m_axi_mem0_WSTRB,
        m_axi_mem0_WLAST,
        m_axi_mem0_WID,
        m_axi_mem0_WUSER,
        m_axi_mem0_ARVALID,
        m_axi_mem0_ARREADY,
        m_axi_mem0_ARADDR,
        m_axi_mem0_ARID,
        m_axi_mem0_ARLEN,
        m_axi_mem0_ARSIZE,
        m_axi_mem0_ARBURST,
        m_axi_mem0_ARLOCK,
        m_axi_mem0_ARCACHE,
        m_axi_mem0_ARPROT,
        m_axi_mem0_ARQOS,
        m_axi_mem0_ARREGION,
        m_axi_mem0_ARUSER,
        m_axi_mem0_RVALID,
        m_axi_mem0_RREADY,
        m_axi_mem0_RDATA,
        m_axi_mem0_RLAST,
        m_axi_mem0_RID,
        m_axi_mem0_RUSER,
        m_axi_mem0_RRESP,
        m_axi_mem0_BVALID,
        m_axi_mem0_BREADY,
        m_axi_mem0_BRESP,
        m_axi_mem0_BID,
        m_axi_mem0_BUSER
);

parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 5'b00000;
parameter    ap_ST_st2_fsm_1 = 5'b1;
parameter    ap_ST_st3_fsm_2 = 5'b10;
parameter    ap_ST_pp0_stg0_fsm_3 = 5'b11;
parameter    ap_ST_st7_fsm_4 = 5'b100;
parameter    ap_ST_st8_fsm_5 = 5'b101;
parameter    ap_ST_st9_fsm_6 = 5'b110;
parameter    ap_ST_st10_fsm_7 = 5'b111;
parameter    ap_ST_st11_fsm_8 = 5'b1000;
parameter    ap_ST_st12_fsm_9 = 5'b1001;
parameter    ap_ST_st13_fsm_10 = 5'b1010;
parameter    ap_ST_st14_fsm_11 = 5'b1011;
parameter    ap_ST_st15_fsm_12 = 5'b1100;
parameter    ap_ST_st16_fsm_13 = 5'b1101;
parameter    ap_ST_st17_fsm_14 = 5'b1110;
parameter    ap_ST_st18_fsm_15 = 5'b1111;
parameter    ap_ST_st19_fsm_16 = 5'b10000;
parameter    ap_ST_st20_fsm_17 = 5'b10001;
parameter    ap_ST_st21_fsm_18 = 5'b10010;
parameter    ap_ST_st22_fsm_19 = 5'b10011;
parameter    ap_ST_st23_fsm_20 = 5'b10100;
parameter    ap_ST_st24_fsm_21 = 5'b10101;
parameter    ap_ST_st25_fsm_22 = 5'b10110;
parameter    ap_ST_st26_fsm_23 = 5'b10111;
parameter    ap_ST_st27_fsm_24 = 5'b11000;
parameter    ap_ST_st28_fsm_25 = 5'b11001;
parameter    ap_ST_pp1_stg0_fsm_26 = 5'b11010;
parameter    ap_ST_st32_fsm_27 = 5'b11011;
parameter    ap_ST_pp2_stg0_fsm_28 = 5'b11100;
parameter    ap_ST_st36_fsm_29 = 5'b11101;
parameter    ap_ST_st37_fsm_30 = 5'b11110;
parameter    ap_ST_st38_fsm_31 = 5'b11111;
parameter    C_M_AXI_MEM0_ID_WIDTH = 1;
parameter    C_M_AXI_MEM0_ADDR_WIDTH = 32;
parameter    C_M_AXI_MEM0_DATA_WIDTH = 32;
parameter    ap_const_int64_8 = 8;
parameter    C_M_AXI_MEM0_AWUSER_WIDTH = 1;
parameter    C_M_AXI_MEM0_ARUSER_WIDTH = 1;
parameter    C_M_AXI_MEM0_WUSER_WIDTH = 1;
parameter    C_M_AXI_MEM0_RUSER_WIDTH = 1;
parameter    C_M_AXI_MEM0_BUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_MEM0_TARGET_ADDR = 0;
parameter    C_M_AXI_MEM0_USER_VALUE = 0;
parameter    C_M_AXI_MEM0_PROT_VALUE = 0;
parameter    C_M_AXI_MEM0_CACHE_VALUE = 3;
parameter    ap_const_lv1_0 = 1'b0;
parameter    ap_const_lv8_0 = 8'b00000000;
parameter    ap_const_lv6_0 = 6'b000000;
parameter    ap_const_lv8_1 = 8'b1;
parameter    ap_const_lv64_20 = 64'b100000;
parameter    ap_const_lv32_20 = 32'b100000;
parameter    ap_const_lv3_0 = 3'b000;
parameter    ap_const_lv2_0 = 2'b00;
parameter    ap_const_lv4_0 = 4'b0000;
parameter    ap_const_lv4_F = 4'b1111;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv32_7 = 32'b111;
parameter    ap_const_lv6_20 = 6'b100000;
parameter    ap_const_lv6_1 = 6'b1;
parameter    ap_const_lv8_20 = 8'b100000;
parameter    ap_const_lv8_80 = 8'b10000000;
parameter    ap_const_lv7_7F = 7'b1111111;
parameter    ap_true = 1'b1;
parameter    C_M_AXI_MEM0_WSTRB_WIDTH = (C_M_AXI_MEM0_DATA_WIDTH / ap_const_int64_8);
parameter    C_M_AXI_WSTRB_WIDTH = (C_M_AXI_DATA_WIDTH / ap_const_int64_8);

input   ap_clk;
input   ap_rst_n;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_mem0_AWVALID;
input   m_axi_mem0_AWREADY;
output  [C_M_AXI_MEM0_ADDR_WIDTH - 1 : 0] m_axi_mem0_AWADDR;
output  [C_M_AXI_MEM0_ID_WIDTH - 1 : 0] m_axi_mem0_AWID;
output  [7:0] m_axi_mem0_AWLEN;
output  [2:0] m_axi_mem0_AWSIZE;
output  [1:0] m_axi_mem0_AWBURST;
output  [1:0] m_axi_mem0_AWLOCK;
output  [3:0] m_axi_mem0_AWCACHE;
output  [2:0] m_axi_mem0_AWPROT;
output  [3:0] m_axi_mem0_AWQOS;
output  [3:0] m_axi_mem0_AWREGION;
output  [C_M_AXI_MEM0_AWUSER_WIDTH - 1 : 0] m_axi_mem0_AWUSER;
output   m_axi_mem0_WVALID;
input   m_axi_mem0_WREADY;
output  [C_M_AXI_MEM0_DATA_WIDTH - 1 : 0] m_axi_mem0_WDATA;
output  [C_M_AXI_MEM0_WSTRB_WIDTH - 1 : 0] m_axi_mem0_WSTRB;
output   m_axi_mem0_WLAST;
output  [C_M_AXI_MEM0_ID_WIDTH - 1 : 0] m_axi_mem0_WID;
output  [C_M_AXI_MEM0_WUSER_WIDTH - 1 : 0] m_axi_mem0_WUSER;
output   m_axi_mem0_ARVALID;
input   m_axi_mem0_ARREADY;
output  [C_M_AXI_MEM0_ADDR_WIDTH - 1 : 0] m_axi_mem0_ARADDR;
output  [C_M_AXI_MEM0_ID_WIDTH - 1 : 0] m_axi_mem0_ARID;
output  [7:0] m_axi_mem0_ARLEN;
output  [2:0] m_axi_mem0_ARSIZE;
output  [1:0] m_axi_mem0_ARBURST;
output  [1:0] m_axi_mem0_ARLOCK;
output  [3:0] m_axi_mem0_ARCACHE;
output  [2:0] m_axi_mem0_ARPROT;
output  [3:0] m_axi_mem0_ARQOS;
output  [3:0] m_axi_mem0_ARREGION;
output  [C_M_AXI_MEM0_ARUSER_WIDTH - 1 : 0] m_axi_mem0_ARUSER;
input   m_axi_mem0_RVALID;
output   m_axi_mem0_RREADY;
input  [C_M_AXI_MEM0_DATA_WIDTH - 1 : 0] m_axi_mem0_RDATA;
input   m_axi_mem0_RLAST;
input  [C_M_AXI_MEM0_ID_WIDTH - 1 : 0] m_axi_mem0_RID;
input  [C_M_AXI_MEM0_RUSER_WIDTH - 1 : 0] m_axi_mem0_RUSER;
input  [1:0] m_axi_mem0_RRESP;
input   m_axi_mem0_BVALID;
output   m_axi_mem0_BREADY;
input  [1:0] m_axi_mem0_BRESP;
input  [C_M_AXI_MEM0_ID_WIDTH - 1 : 0] m_axi_mem0_BID;
input  [C_M_AXI_MEM0_BUSER_WIDTH - 1 : 0] m_axi_mem0_BUSER;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg    ap_rst_n_inv;
reg   [4:0] ap_CS_fsm = 5'b00000;
reg    mem0_AWVALID;
wire    mem0_AWREADY;
reg   [31:0] mem0_AWADDR;
wire   [0:0] mem0_AWID;
reg   [31:0] mem0_AWLEN;
wire   [2:0] mem0_AWSIZE;
wire   [1:0] mem0_AWBURST;
wire   [1:0] mem0_AWLOCK;
wire   [3:0] mem0_AWCACHE;
wire   [2:0] mem0_AWPROT;
wire   [3:0] mem0_AWQOS;
wire   [3:0] mem0_AWREGION;
wire   [0:0] mem0_AWUSER;
reg    mem0_WVALID;
wire    mem0_WREADY;
reg   [31:0] mem0_WDATA;
wire   [3:0] mem0_WSTRB;
wire    mem0_WLAST;
wire   [0:0] mem0_WID;
wire   [0:0] mem0_WUSER;
reg    mem0_ARVALID;
wire    mem0_ARREADY;
reg   [31:0] mem0_ARADDR;
wire   [0:0] mem0_ARID;
reg   [31:0] mem0_ARLEN;
wire   [2:0] mem0_ARSIZE;
wire   [1:0] mem0_ARBURST;
wire   [1:0] mem0_ARLOCK;
wire   [3:0] mem0_ARCACHE;
wire   [2:0] mem0_ARPROT;
wire   [3:0] mem0_ARQOS;
wire   [3:0] mem0_ARREGION;
wire   [0:0] mem0_ARUSER;
wire    mem0_RVALID;
reg    mem0_RREADY;
wire   [31:0] mem0_RDATA;
wire    mem0_RLAST;
wire   [0:0] mem0_RID;
wire   [0:0] mem0_RUSER;
wire   [1:0] mem0_RRESP;
wire    mem0_BVALID;
reg    mem0_BREADY;
wire   [1:0] mem0_BRESP;
wire   [0:0] mem0_BID;
wire   [0:0] mem0_BUSER;
wire    hls_axi_bus_test_mem0_m_axi_U_ap_dummy_ce;
reg   [5:0] indvar_reg_169;
reg   [5:0] indvar8_reg_192;
reg   [5:0] ap_reg_ppstg_indvar8_reg_192_pp1_it1;
reg    ap_reg_ppiten_pp1_it0 = 1'b0;
reg   [0:0] exitcond2_reg_460;
reg    ap_sig_bdd_193;
reg    ap_reg_ppiten_pp1_it1 = 1'b0;
reg    ap_reg_ppiten_pp1_it2 = 1'b0;
reg   [5:0] indvar1_reg_204;
wire   [31:0] buf_q0;
reg   [31:0] reg_216;
reg    ap_reg_ppiten_pp0_it0 = 1'b0;
reg    ap_reg_ppiten_pp0_it1 = 1'b0;
reg   [0:0] exitcond4_reg_406;
reg   [0:0] ap_reg_ppstg_exitcond4_reg_406_pp0_it1;
reg    ap_sig_ioackin_mem0_WREADY;
reg    ap_reg_ppiten_pp0_it2 = 1'b0;
reg    ap_reg_ppiten_pp2_it0 = 1'b0;
reg    ap_reg_ppiten_pp2_it1 = 1'b0;
reg   [0:0] exitcond3_reg_474;
reg   [0:0] ap_reg_ppstg_exitcond3_reg_474_pp2_it1;
reg    ap_reg_ppiten_pp2_it2 = 1'b0;
reg   [31:0] reg_221;
wire   [0:0] exitcond1_fu_238_p2;
reg    ap_sig_ioackin_mem0_AWREADY;
wire   [5:0] k_1_fu_244_p2;
wire   [0:0] exitcond4_fu_277_p2;
wire   [5:0] indvar_next_fu_283_p2;
wire   [7:0] i_2_fu_294_p2;
reg   [7:0] i_2_reg_420;
wire   [6:0] tmp_4_fu_310_p2;
reg   [6:0] tmp_4_reg_428;
wire   [0:0] exitcond_fu_300_p2;
reg    ap_sig_ioackin_mem0_ARREADY;
reg   [31:0] mem0_addr_reg_433;
wire   [7:0] i_1_fu_337_p2;
reg   [7:0] i_1_reg_445;
reg   [31:0] data_1_reg_450;
wire   [31:0] result_fu_343_p2;
reg   [31:0] result_reg_455;
wire   [0:0] exitcond2_fu_348_p2;
reg   [0:0] ap_reg_ppstg_exitcond2_reg_460_pp1_it1;
wire   [5:0] indvar_next9_fu_354_p2;
reg   [5:0] indvar_next9_reg_464;
wire   [0:0] exitcond3_fu_372_p2;
wire   [5:0] indvar_next1_fu_378_p2;
reg   [4:0] buf_address0;
reg    buf_ce0;
reg    buf_we0;
reg   [31:0] buf_d0;
reg   [7:0] i_reg_146;
reg   [5:0] k_reg_158;
wire   [0:0] tmp_fu_226_p3;
reg   [7:0] i1_reg_180;
reg   [5:0] indvar8_phi_fu_196_p4;
wire   [63:0] tmp_2_fu_261_p1;
wire   [63:0] tmp_9_fu_289_p1;
wire   [63:0] tmp_3_fu_360_p1;
wire   [63:0] tmp_7_fu_384_p1;
wire   [63:0] tmp_10_fu_266_p1;
wire   [63:0] tmp_5_fu_316_p1;
wire   [63:0] tmp_6_fu_326_p1;
reg    ap_reg_ioackin_mem0_AWREADY = 1'b0;
reg    ap_reg_ioackin_mem0_WREADY = 1'b0;
reg    ap_reg_ioackin_mem0_ARREADY = 1'b0;
wire   [31:0] tmp_1_cast_fu_256_p1;
wire   [7:0] k_cast8_fu_234_p1;
wire   [7:0] tmp_1_fu_250_p2;
wire   [6:0] tmp_8_fu_306_p1;
reg   [4:0] ap_NS_fsm;
reg    ap_sig_bdd_421;
reg    ap_sig_bdd_395;


hls_axi_bus_test_mem0_m_axi #(
    .USER_DW( 32 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_MEM0_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_MEM0_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_MEM0_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_MEM0_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_MEM0_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_MEM0_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_MEM0_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_MEM0_BUSER_WIDTH ),
    .C_TARGET_ADDR( C_M_AXI_MEM0_TARGET_ADDR ),
    .C_USER_VALUE( C_M_AXI_MEM0_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_MEM0_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_MEM0_CACHE_VALUE ))
hls_axi_bus_test_mem0_m_axi_U(
    .AWVALID( m_axi_mem0_AWVALID ),
    .AWREADY( m_axi_mem0_AWREADY ),
    .AWADDR( m_axi_mem0_AWADDR ),
    .AWID( m_axi_mem0_AWID ),
    .AWLEN( m_axi_mem0_AWLEN ),
    .AWSIZE( m_axi_mem0_AWSIZE ),
    .AWBURST( m_axi_mem0_AWBURST ),
    .AWLOCK( m_axi_mem0_AWLOCK ),
    .AWCACHE( m_axi_mem0_AWCACHE ),
    .AWPROT( m_axi_mem0_AWPROT ),
    .AWQOS( m_axi_mem0_AWQOS ),
    .AWREGION( m_axi_mem0_AWREGION ),
    .AWUSER( m_axi_mem0_AWUSER ),
    .WVALID( m_axi_mem0_WVALID ),
    .WREADY( m_axi_mem0_WREADY ),
    .WDATA( m_axi_mem0_WDATA ),
    .WSTRB( m_axi_mem0_WSTRB ),
    .WLAST( m_axi_mem0_WLAST ),
    .WID( m_axi_mem0_WID ),
    .WUSER( m_axi_mem0_WUSER ),
    .ARVALID( m_axi_mem0_ARVALID ),
    .ARREADY( m_axi_mem0_ARREADY ),
    .ARADDR( m_axi_mem0_ARADDR ),
    .ARID( m_axi_mem0_ARID ),
    .ARLEN( m_axi_mem0_ARLEN ),
    .ARSIZE( m_axi_mem0_ARSIZE ),
    .ARBURST( m_axi_mem0_ARBURST ),
    .ARLOCK( m_axi_mem0_ARLOCK ),
    .ARCACHE( m_axi_mem0_ARCACHE ),
    .ARPROT( m_axi_mem0_ARPROT ),
    .ARQOS( m_axi_mem0_ARQOS ),
    .ARREGION( m_axi_mem0_ARREGION ),
    .ARUSER( m_axi_mem0_ARUSER ),
    .RVALID( m_axi_mem0_RVALID ),
    .RREADY( m_axi_mem0_RREADY ),
    .RDATA( m_axi_mem0_RDATA ),
    .RLAST( m_axi_mem0_RLAST ),
    .RID( m_axi_mem0_RID ),
    .RUSER( m_axi_mem0_RUSER ),
    .RRESP( m_axi_mem0_RRESP ),
    .BVALID( m_axi_mem0_BVALID ),
    .BREADY( m_axi_mem0_BREADY ),
    .BRESP( m_axi_mem0_BRESP ),
    .BID( m_axi_mem0_BID ),
    .BUSER( m_axi_mem0_BUSER ),
    .ACLK( ap_clk ),
    .ARESET( ap_rst_n_inv ),
    .ACLK_EN( hls_axi_bus_test_mem0_m_axi_U_ap_dummy_ce ),
    .I_ARVALID( mem0_ARVALID ),
    .I_ARREADY( mem0_ARREADY ),
    .I_ARADDR( mem0_ARADDR ),
    .I_ARID( mem0_ARID ),
    .I_ARLEN( mem0_ARLEN ),
    .I_ARSIZE( mem0_ARSIZE ),
    .I_ARLOCK( mem0_ARLOCK ),
    .I_ARCACHE( mem0_ARCACHE ),
    .I_ARQOS( mem0_ARQOS ),
    .I_ARPROT( mem0_ARPROT ),
    .I_ARUSER( mem0_ARUSER ),
    .I_ARBURST( mem0_ARBURST ),
    .I_ARREGION( mem0_ARREGION ),
    .I_RVALID( mem0_RVALID ),
    .I_RREADY( mem0_RREADY ),
    .I_RDATA( mem0_RDATA ),
    .I_RID( mem0_RID ),
    .I_RUSER( mem0_RUSER ),
    .I_RRESP( mem0_RRESP ),
    .I_RLAST( mem0_RLAST ),
    .I_AWVALID( mem0_AWVALID ),
    .I_AWREADY( mem0_AWREADY ),
    .I_AWADDR( mem0_AWADDR ),
    .I_AWID( mem0_AWID ),
    .I_AWLEN( mem0_AWLEN ),
    .I_AWSIZE( mem0_AWSIZE ),
    .I_AWLOCK( mem0_AWLOCK ),
    .I_AWCACHE( mem0_AWCACHE ),
    .I_AWQOS( mem0_AWQOS ),
    .I_AWPROT( mem0_AWPROT ),
    .I_AWUSER( mem0_AWUSER ),
    .I_AWBURST( mem0_AWBURST ),
    .I_AWREGION( mem0_AWREGION ),
    .I_WVALID( mem0_WVALID ),
    .I_WREADY( mem0_WREADY ),
    .I_WDATA( mem0_WDATA ),
    .I_WID( mem0_WID ),
    .I_WUSER( mem0_WUSER ),
    .I_WLAST( mem0_WLAST ),
    .I_WSTRB( mem0_WSTRB ),
    .I_BVALID( mem0_BVALID ),
    .I_BREADY( mem0_BREADY ),
    .I_BRESP( mem0_BRESP ),
    .I_BID( mem0_BID ),
    .I_BUSER( mem0_BUSER )
);

hls_axi_bus_test_buf #(
    .DataWidth( 32 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
buf_U(
    .clk( ap_clk ),
    .reset( ap_rst_n_inv ),
    .address0( buf_address0 ),
    .ce0( buf_ce0 ),
    .we0( buf_we0 ),
    .d0( buf_d0 ),
    .q0( buf_q0 )
);



/// the current state (ap_CS_fsm) of the state machine. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_CS_fsm
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

/// ap_reg_ioackin_mem0_ARREADY assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ioackin_mem0_ARREADY
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_mem0_ARREADY <= ap_const_logic_0;
    end else begin
        if ((((ap_ST_st11_fsm_8 == ap_CS_fsm) & ~(ap_const_logic_0 == ap_sig_ioackin_mem0_ARREADY)) | (~(ap_const_logic_0 == ap_sig_ioackin_mem0_ARREADY) & (ap_ST_st12_fsm_9 == ap_CS_fsm)) | ((ap_ST_st10_fsm_7 == ap_CS_fsm) & ~(ap_const_lv1_0 == exitcond_fu_300_p2) & ~(~(ap_const_lv1_0 == exitcond_fu_300_p2) & (ap_const_logic_0 == ap_sig_ioackin_mem0_ARREADY))))) begin
            ap_reg_ioackin_mem0_ARREADY <= ap_const_logic_0;
        end else if ((((ap_ST_st10_fsm_7 == ap_CS_fsm) & ~(ap_const_lv1_0 == exitcond_fu_300_p2) & (ap_const_logic_1 == mem0_ARREADY)) | ((ap_ST_st11_fsm_8 == ap_CS_fsm) & (ap_const_logic_1 == mem0_ARREADY)) | ((ap_ST_st12_fsm_9 == ap_CS_fsm) & (ap_const_logic_1 == mem0_ARREADY)))) begin
            ap_reg_ioackin_mem0_ARREADY <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ioackin_mem0_AWREADY assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ioackin_mem0_AWREADY
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_mem0_AWREADY <= ap_const_logic_0;
    end else begin
        if ((((ap_ST_st3_fsm_2 == ap_CS_fsm) & ~(ap_const_lv1_0 == exitcond1_fu_238_p2) & ~(~(ap_const_lv1_0 == exitcond1_fu_238_p2) & (ap_const_logic_0 == ap_sig_ioackin_mem0_AWREADY))) | ((ap_ST_st19_fsm_16 == ap_CS_fsm) & ~(ap_const_logic_0 == ap_sig_ioackin_mem0_AWREADY)) | (~(ap_const_logic_0 == ap_sig_ioackin_mem0_AWREADY) & (ap_ST_st32_fsm_27 == ap_CS_fsm)))) begin
            ap_reg_ioackin_mem0_AWREADY <= ap_const_logic_0;
        end else if ((((ap_ST_st3_fsm_2 == ap_CS_fsm) & ~(ap_const_lv1_0 == exitcond1_fu_238_p2) & (ap_const_logic_1 == mem0_AWREADY)) | ((ap_ST_st19_fsm_16 == ap_CS_fsm) & (ap_const_logic_1 == mem0_AWREADY)) | ((ap_ST_st32_fsm_27 == ap_CS_fsm) & (ap_const_logic_1 == mem0_AWREADY)))) begin
            ap_reg_ioackin_mem0_AWREADY <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ioackin_mem0_WREADY assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ioackin_mem0_WREADY
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_mem0_WREADY <= ap_const_logic_0;
    end else begin
        if ((((ap_const_lv1_0 == ap_reg_ppstg_exitcond4_reg_406_pp0_it1) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it2) & ~((ap_const_lv1_0 == ap_reg_ppstg_exitcond4_reg_406_pp0_it1) & (ap_const_logic_0 == ap_sig_ioackin_mem0_WREADY) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it2))) | ((ap_ST_st20_fsm_17 == ap_CS_fsm) & ~(ap_const_logic_0 == ap_sig_ioackin_mem0_WREADY)) | ((ap_const_lv1_0 == ap_reg_ppstg_exitcond3_reg_474_pp2_it1) & (ap_const_logic_1 == ap_reg_ppiten_pp2_it2) & ~((ap_const_logic_0 == ap_sig_ioackin_mem0_WREADY) & (ap_const_lv1_0 == ap_reg_ppstg_exitcond3_reg_474_pp2_it1) & (ap_const_logic_1 == ap_reg_ppiten_pp2_it2))))) begin
            ap_reg_ioackin_mem0_WREADY <= ap_const_logic_0;
        end else if ((((ap_const_lv1_0 == ap_reg_ppstg_exitcond4_reg_406_pp0_it1) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it2) & (ap_const_logic_1 == mem0_WREADY)) | ((ap_const_logic_1 == mem0_WREADY) & (ap_ST_st20_fsm_17 == ap_CS_fsm)) | ((ap_const_lv1_0 == ap_reg_ppstg_exitcond3_reg_474_pp2_it1) & (ap_const_logic_1 == ap_reg_ppiten_pp2_it2) & (ap_const_logic_1 == mem0_WREADY)))) begin
            ap_reg_ioackin_mem0_WREADY <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ppiten_pp0_it0 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp0_it0
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
    end else begin
        if (((ap_ST_pp0_stg0_fsm_3 == ap_CS_fsm) & ~((ap_const_lv1_0 == ap_reg_ppstg_exitcond4_reg_406_pp0_it1) & (ap_const_logic_0 == ap_sig_ioackin_mem0_WREADY) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it2)) & ~(ap_const_lv1_0 == exitcond4_fu_277_p2))) begin
            ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
        end else if (((ap_ST_st3_fsm_2 == ap_CS_fsm) & ~(ap_const_lv1_0 == exitcond1_fu_238_p2) & ~(~(ap_const_lv1_0 == exitcond1_fu_238_p2) & (ap_const_logic_0 == ap_sig_ioackin_mem0_AWREADY)))) begin
            ap_reg_ppiten_pp0_it0 <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ppiten_pp0_it1 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp0_it1
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
    end else begin
        if (((ap_ST_pp0_stg0_fsm_3 == ap_CS_fsm) & ~((ap_const_lv1_0 == ap_reg_ppstg_exitcond4_reg_406_pp0_it1) & (ap_const_logic_0 == ap_sig_ioackin_mem0_WREADY) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it2)) & (ap_const_lv1_0 == exitcond4_fu_277_p2))) begin
            ap_reg_ppiten_pp0_it1 <= ap_const_logic_1;
        end else if ((((ap_ST_st3_fsm_2 == ap_CS_fsm) & ~(ap_const_lv1_0 == exitcond1_fu_238_p2) & ~(~(ap_const_lv1_0 == exitcond1_fu_238_p2) & (ap_const_logic_0 == ap_sig_ioackin_mem0_AWREADY))) | ((ap_ST_pp0_stg0_fsm_3 == ap_CS_fsm) & ~((ap_const_lv1_0 == ap_reg_ppstg_exitcond4_reg_406_pp0_it1) & (ap_const_logic_0 == ap_sig_ioackin_mem0_WREADY) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it2)) & ~(ap_const_lv1_0 == exitcond4_fu_277_p2)))) begin
            ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
        end
    end
end

/// ap_reg_ppiten_pp0_it2 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp0_it2
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ppiten_pp0_it2 <= ap_const_logic_0;
    end else begin
        if (~((ap_const_lv1_0 == ap_reg_ppstg_exitcond4_reg_406_pp0_it1) & (ap_const_logic_0 == ap_sig_ioackin_mem0_WREADY) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it2))) begin
            ap_reg_ppiten_pp0_it2 <= ap_reg_ppiten_pp0_it1;
        end else if (((ap_ST_st3_fsm_2 == ap_CS_fsm) & ~(ap_const_lv1_0 == exitcond1_fu_238_p2) & ~(~(ap_const_lv1_0 == exitcond1_fu_238_p2) & (ap_const_logic_0 == ap_sig_ioackin_mem0_AWREADY)))) begin
            ap_reg_ppiten_pp0_it2 <= ap_const_logic_0;
        end
    end
end

/// ap_reg_ppiten_pp1_it0 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp1_it0
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ppiten_pp1_it0 <= ap_const_logic_0;
    end else begin
        if (((ap_ST_pp1_stg0_fsm_26 == ap_CS_fsm) & ~(ap_sig_bdd_193 & (ap_const_logic_1 == ap_reg_ppiten_pp1_it1)) & ~(ap_const_lv1_0 == exitcond2_fu_348_p2))) begin
            ap_reg_ppiten_pp1_it0 <= ap_const_logic_0;
        end else if ((ap_ST_st28_fsm_25 == ap_CS_fsm)) begin
            ap_reg_ppiten_pp1_it0 <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ppiten_pp1_it1 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp1_it1
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ppiten_pp1_it1 <= ap_const_logic_0;
    end else begin
        if (((ap_ST_pp1_stg0_fsm_26 == ap_CS_fsm) & ~(ap_sig_bdd_193 & (ap_const_logic_1 == ap_reg_ppiten_pp1_it1)) & (ap_const_lv1_0 == exitcond2_fu_348_p2))) begin
            ap_reg_ppiten_pp1_it1 <= ap_const_logic_1;
        end else if (((ap_ST_st28_fsm_25 == ap_CS_fsm) | ((ap_ST_pp1_stg0_fsm_26 == ap_CS_fsm) & ~(ap_sig_bdd_193 & (ap_const_logic_1 == ap_reg_ppiten_pp1_it1)) & ~(ap_const_lv1_0 == exitcond2_fu_348_p2)))) begin
            ap_reg_ppiten_pp1_it1 <= ap_const_logic_0;
        end
    end
end

/// ap_reg_ppiten_pp1_it2 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp1_it2
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ppiten_pp1_it2 <= ap_const_logic_0;
    end else begin
        if (~(ap_sig_bdd_193 & (ap_const_logic_1 == ap_reg_ppiten_pp1_it1))) begin
            ap_reg_ppiten_pp1_it2 <= ap_reg_ppiten_pp1_it1;
        end else if ((ap_ST_st28_fsm_25 == ap_CS_fsm)) begin
            ap_reg_ppiten_pp1_it2 <= ap_const_logic_0;
        end
    end
end

/// ap_reg_ppiten_pp2_it0 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp2_it0
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ppiten_pp2_it0 <= ap_const_logic_0;
    end else begin
        if (((ap_ST_pp2_stg0_fsm_28 == ap_CS_fsm) & ~((ap_const_logic_0 == ap_sig_ioackin_mem0_WREADY) & (ap_const_lv1_0 == ap_reg_ppstg_exitcond3_reg_474_pp2_it1) & (ap_const_logic_1 == ap_reg_ppiten_pp2_it2)) & ~(ap_const_lv1_0 == exitcond3_fu_372_p2))) begin
            ap_reg_ppiten_pp2_it0 <= ap_const_logic_0;
        end else if ((~(ap_const_logic_0 == ap_sig_ioackin_mem0_AWREADY) & (ap_ST_st32_fsm_27 == ap_CS_fsm))) begin
            ap_reg_ppiten_pp2_it0 <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ppiten_pp2_it1 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp2_it1
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ppiten_pp2_it1 <= ap_const_logic_0;
    end else begin
        if (((ap_ST_pp2_stg0_fsm_28 == ap_CS_fsm) & ~((ap_const_logic_0 == ap_sig_ioackin_mem0_WREADY) & (ap_const_lv1_0 == ap_reg_ppstg_exitcond3_reg_474_pp2_it1) & (ap_const_logic_1 == ap_reg_ppiten_pp2_it2)) & (ap_const_lv1_0 == exitcond3_fu_372_p2))) begin
            ap_reg_ppiten_pp2_it1 <= ap_const_logic_1;
        end else if (((~(ap_const_logic_0 == ap_sig_ioackin_mem0_AWREADY) & (ap_ST_st32_fsm_27 == ap_CS_fsm)) | ((ap_ST_pp2_stg0_fsm_28 == ap_CS_fsm) & ~((ap_const_logic_0 == ap_sig_ioackin_mem0_WREADY) & (ap_const_lv1_0 == ap_reg_ppstg_exitcond3_reg_474_pp2_it1) & (ap_const_logic_1 == ap_reg_ppiten_pp2_it2)) & ~(ap_const_lv1_0 == exitcond3_fu_372_p2)))) begin
            ap_reg_ppiten_pp2_it1 <= ap_const_logic_0;
        end
    end
end

/// ap_reg_ppiten_pp2_it2 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp2_it2
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ppiten_pp2_it2 <= ap_const_logic_0;
    end else begin
        if (~((ap_const_logic_0 == ap_sig_ioackin_mem0_WREADY) & (ap_const_lv1_0 == ap_reg_ppstg_exitcond3_reg_474_pp2_it1) & (ap_const_logic_1 == ap_reg_ppiten_pp2_it2))) begin
            ap_reg_ppiten_pp2_it2 <= ap_reg_ppiten_pp2_it1;
        end else if ((~(ap_const_logic_0 == ap_sig_ioackin_mem0_AWREADY) & (ap_ST_st32_fsm_27 == ap_CS_fsm))) begin
            ap_reg_ppiten_pp2_it2 <= ap_const_logic_0;
        end
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_st2_fsm_1 == ap_CS_fsm) & ~(ap_const_lv1_0 == tmp_fu_226_p3))) begin
        i1_reg_180 <= ap_const_lv8_1;
    end else if ((~(mem0_BVALID == ap_const_logic_0) & (ap_ST_st23_fsm_20 == ap_CS_fsm))) begin
        i1_reg_180 <= i_1_reg_445;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_st9_fsm_6 == ap_CS_fsm) & ~(mem0_BVALID == ap_const_logic_0))) begin
        i_reg_146 <= i_2_reg_420;
    end else if (((ap_ST_st1_fsm_0 == ap_CS_fsm) & ~(ap_start == ap_const_logic_0))) begin
        i_reg_146 <= ap_const_lv8_0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((~(ap_const_logic_0 == ap_sig_ioackin_mem0_AWREADY) & (ap_ST_st32_fsm_27 == ap_CS_fsm))) begin
        indvar1_reg_204 <= ap_const_lv6_0;
    end else if (((ap_ST_pp2_stg0_fsm_28 == ap_CS_fsm) & (ap_const_logic_1 == ap_reg_ppiten_pp2_it0) & ~((ap_const_logic_0 == ap_sig_ioackin_mem0_WREADY) & (ap_const_lv1_0 == ap_reg_ppstg_exitcond3_reg_474_pp2_it1) & (ap_const_logic_1 == ap_reg_ppiten_pp2_it2)) & (ap_const_lv1_0 == exitcond3_fu_372_p2))) begin
        indvar1_reg_204 <= indvar_next1_fu_378_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_ST_st28_fsm_25 == ap_CS_fsm)) begin
        indvar8_reg_192 <= ap_const_lv6_0;
    end else if (((ap_ST_pp1_stg0_fsm_26 == ap_CS_fsm) & (exitcond2_reg_460 == ap_const_lv1_0) & (ap_const_logic_1 == ap_reg_ppiten_pp1_it1) & ~(ap_sig_bdd_193 & (ap_const_logic_1 == ap_reg_ppiten_pp1_it1)))) begin
        indvar8_reg_192 <= indvar_next9_reg_464;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_st3_fsm_2 == ap_CS_fsm) & ~(ap_const_lv1_0 == exitcond1_fu_238_p2) & ~(~(ap_const_lv1_0 == exitcond1_fu_238_p2) & (ap_const_logic_0 == ap_sig_ioackin_mem0_AWREADY)))) begin
        indvar_reg_169 <= ap_const_lv6_0;
    end else if (((ap_ST_pp0_stg0_fsm_3 == ap_CS_fsm) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ~((ap_const_lv1_0 == ap_reg_ppstg_exitcond4_reg_406_pp0_it1) & (ap_const_logic_0 == ap_sig_ioackin_mem0_WREADY) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it2)) & (ap_const_lv1_0 == exitcond4_fu_277_p2))) begin
        indvar_reg_169 <= indvar_next_fu_283_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_st2_fsm_1 == ap_CS_fsm) & (ap_const_lv1_0 == tmp_fu_226_p3))) begin
        k_reg_158 <= ap_const_lv6_0;
    end else if (((ap_ST_st3_fsm_2 == ap_CS_fsm) & (ap_const_lv1_0 == exitcond1_fu_238_p2) & ~(~(ap_const_lv1_0 == exitcond1_fu_238_p2) & (ap_const_logic_0 == ap_sig_ioackin_mem0_AWREADY)))) begin
        k_reg_158 <= k_1_fu_244_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_pp1_stg0_fsm_26 == ap_CS_fsm) & ~(ap_sig_bdd_193 & (ap_const_logic_1 == ap_reg_ppiten_pp1_it1)))) begin
        ap_reg_ppstg_exitcond2_reg_460_pp1_it1 <= exitcond2_reg_460;
        ap_reg_ppstg_indvar8_reg_192_pp1_it1 <= indvar8_reg_192;
        exitcond2_reg_460 <= exitcond2_fu_348_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_pp2_stg0_fsm_28 == ap_CS_fsm) & ~((ap_const_logic_0 == ap_sig_ioackin_mem0_WREADY) & (ap_const_lv1_0 == ap_reg_ppstg_exitcond3_reg_474_pp2_it1) & (ap_const_logic_1 == ap_reg_ppiten_pp2_it2)))) begin
        ap_reg_ppstg_exitcond3_reg_474_pp2_it1 <= exitcond3_reg_474;
        exitcond3_reg_474 <= exitcond3_fu_372_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_pp0_stg0_fsm_3 == ap_CS_fsm) & ~((ap_const_lv1_0 == ap_reg_ppstg_exitcond4_reg_406_pp0_it1) & (ap_const_logic_0 == ap_sig_ioackin_mem0_WREADY) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it2)))) begin
        ap_reg_ppstg_exitcond4_reg_406_pp0_it1 <= exitcond4_reg_406;
        exitcond4_reg_406 <= exitcond4_fu_277_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((~(mem0_RVALID == ap_const_logic_0) & (ap_ST_st18_fsm_15 == ap_CS_fsm))) begin
        data_1_reg_450 <= mem0_RDATA;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((~(ap_const_logic_0 == ap_sig_ioackin_mem0_ARREADY) & (ap_ST_st12_fsm_9 == ap_CS_fsm))) begin
        i_1_reg_445 <= i_1_fu_337_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_ST_st7_fsm_4 == ap_CS_fsm)) begin
        i_2_reg_420 <= i_2_fu_294_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_pp1_stg0_fsm_26 == ap_CS_fsm) & (ap_const_logic_1 == ap_reg_ppiten_pp1_it0) & ~(ap_sig_bdd_193 & (ap_const_logic_1 == ap_reg_ppiten_pp1_it1)))) begin
        indvar_next9_reg_464 <= indvar_next9_fu_354_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_st11_fsm_8 == ap_CS_fsm) & ~(ap_const_logic_0 == ap_sig_ioackin_mem0_ARREADY))) begin
        mem0_addr_reg_433[6 : 0] <= tmp_5_fu_316_p1[6 : 0];
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((((ap_ST_pp0_stg0_fsm_3 == ap_CS_fsm) & ~((ap_const_lv1_0 == ap_reg_ppstg_exitcond4_reg_406_pp0_it1) & (ap_const_logic_0 == ap_sig_ioackin_mem0_WREADY) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it2)) & (ap_const_lv1_0 == exitcond4_reg_406)) | ((ap_ST_pp2_stg0_fsm_28 == ap_CS_fsm) & ~((ap_const_logic_0 == ap_sig_ioackin_mem0_WREADY) & (ap_const_lv1_0 == ap_reg_ppstg_exitcond3_reg_474_pp2_it1) & (ap_const_logic_1 == ap_reg_ppiten_pp2_it2)) & (ap_const_lv1_0 == exitcond3_reg_474)))) begin
        reg_216 <= buf_q0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((((ap_ST_st17_fsm_14 == ap_CS_fsm) & ~(mem0_RVALID == ap_const_logic_0)) | ((ap_ST_pp1_stg0_fsm_26 == ap_CS_fsm) & (exitcond2_reg_460 == ap_const_lv1_0) & ~(ap_sig_bdd_193 & (ap_const_logic_1 == ap_reg_ppiten_pp1_it1))))) begin
        reg_221 <= mem0_RDATA;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_st19_fsm_16 == ap_CS_fsm) & ~(ap_const_logic_0 == ap_sig_ioackin_mem0_AWREADY))) begin
        result_reg_455 <= result_fu_343_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_st10_fsm_7 == ap_CS_fsm) & (ap_const_lv1_0 == exitcond_fu_300_p2) & ~(~(ap_const_lv1_0 == exitcond_fu_300_p2) & (ap_const_logic_0 == ap_sig_ioackin_mem0_ARREADY)))) begin
        tmp_4_reg_428 <= tmp_4_fu_310_p2;
    end
end

/// ap_done assign process. ///
always @ (ap_CS_fsm or mem0_BVALID)
begin
    if ((~(mem0_BVALID == ap_const_logic_0) & (ap_ST_st38_fsm_31 == ap_CS_fsm))) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

/// ap_idle assign process. ///
always @ (ap_start or ap_CS_fsm)
begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_ST_st1_fsm_0 == ap_CS_fsm))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

/// ap_ready assign process. ///
always @ (ap_CS_fsm or mem0_BVALID)
begin
    if ((~(mem0_BVALID == ap_const_logic_0) & (ap_ST_st38_fsm_31 == ap_CS_fsm))) begin
        ap_ready = ap_const_logic_1;
    end else begin
        ap_ready = ap_const_logic_0;
    end
end

/// ap_sig_ioackin_mem0_ARREADY assign process. ///
always @ (mem0_ARREADY or ap_reg_ioackin_mem0_ARREADY)
begin
    if ((ap_const_logic_0 == ap_reg_ioackin_mem0_ARREADY)) begin
        ap_sig_ioackin_mem0_ARREADY = mem0_ARREADY;
    end else begin
        ap_sig_ioackin_mem0_ARREADY = ap_const_logic_1;
    end
end

/// ap_sig_ioackin_mem0_AWREADY assign process. ///
always @ (mem0_AWREADY or ap_reg_ioackin_mem0_AWREADY)
begin
    if ((ap_const_logic_0 == ap_reg_ioackin_mem0_AWREADY)) begin
        ap_sig_ioackin_mem0_AWREADY = mem0_AWREADY;
    end else begin
        ap_sig_ioackin_mem0_AWREADY = ap_const_logic_1;
    end
end

/// ap_sig_ioackin_mem0_WREADY assign process. ///
always @ (mem0_WREADY or ap_reg_ioackin_mem0_WREADY)
begin
    if ((ap_const_logic_0 == ap_reg_ioackin_mem0_WREADY)) begin
        ap_sig_ioackin_mem0_WREADY = mem0_WREADY;
    end else begin
        ap_sig_ioackin_mem0_WREADY = ap_const_logic_1;
    end
end

/// buf_address0 assign process. ///
always @ (ap_CS_fsm or ap_reg_ppiten_pp1_it2 or ap_reg_ppiten_pp0_it0 or ap_reg_ppiten_pp2_it0 or tmp_2_fu_261_p1 or tmp_9_fu_289_p1 or tmp_3_fu_360_p1 or tmp_7_fu_384_p1)
begin
    if ((ap_const_logic_1 == ap_reg_ppiten_pp1_it2)) begin
        buf_address0 = tmp_3_fu_360_p1;
    end else if ((ap_ST_st3_fsm_2 == ap_CS_fsm)) begin
        buf_address0 = tmp_2_fu_261_p1;
    end else if (((ap_ST_pp2_stg0_fsm_28 == ap_CS_fsm) & (ap_const_logic_1 == ap_reg_ppiten_pp2_it0))) begin
        buf_address0 = tmp_7_fu_384_p1;
    end else if (((ap_ST_pp0_stg0_fsm_3 == ap_CS_fsm) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0))) begin
        buf_address0 = tmp_9_fu_289_p1;
    end else begin
        buf_address0 = 'bx;
    end
end

/// buf_ce0 assign process. ///
always @ (ap_CS_fsm or ap_sig_bdd_193 or ap_reg_ppiten_pp1_it1 or ap_reg_ppiten_pp1_it2 or ap_reg_ppiten_pp0_it0 or ap_reg_ppstg_exitcond4_reg_406_pp0_it1 or ap_sig_ioackin_mem0_WREADY or ap_reg_ppiten_pp0_it2 or ap_reg_ppiten_pp2_it0 or ap_reg_ppstg_exitcond3_reg_474_pp2_it1 or ap_reg_ppiten_pp2_it2 or exitcond1_fu_238_p2 or ap_sig_ioackin_mem0_AWREADY)
begin
    if ((((ap_ST_st3_fsm_2 == ap_CS_fsm) & ~(~(ap_const_lv1_0 == exitcond1_fu_238_p2) & (ap_const_logic_0 == ap_sig_ioackin_mem0_AWREADY))) | ((ap_ST_pp0_stg0_fsm_3 == ap_CS_fsm) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ~((ap_const_lv1_0 == ap_reg_ppstg_exitcond4_reg_406_pp0_it1) & (ap_const_logic_0 == ap_sig_ioackin_mem0_WREADY) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it2))) | ((ap_ST_pp2_stg0_fsm_28 == ap_CS_fsm) & (ap_const_logic_1 == ap_reg_ppiten_pp2_it0) & ~((ap_const_logic_0 == ap_sig_ioackin_mem0_WREADY) & (ap_const_lv1_0 == ap_reg_ppstg_exitcond3_reg_474_pp2_it1) & (ap_const_logic_1 == ap_reg_ppiten_pp2_it2))) | ((ap_const_logic_1 == ap_reg_ppiten_pp1_it2) & ~(ap_sig_bdd_193 & (ap_const_logic_1 == ap_reg_ppiten_pp1_it1))))) begin
        buf_ce0 = ap_const_logic_1;
    end else begin
        buf_ce0 = ap_const_logic_0;
    end
end

/// buf_d0 assign process. ///
always @ (ap_CS_fsm or ap_reg_ppiten_pp1_it2 or reg_221 or tmp_1_cast_fu_256_p1)
begin
    if ((ap_const_logic_1 == ap_reg_ppiten_pp1_it2)) begin
        buf_d0 = reg_221;
    end else if ((ap_ST_st3_fsm_2 == ap_CS_fsm)) begin
        buf_d0 = tmp_1_cast_fu_256_p1;
    end else begin
        buf_d0 = 'bx;
    end
end

/// buf_we0 assign process. ///
always @ (ap_CS_fsm or ap_sig_bdd_193 or ap_reg_ppiten_pp1_it1 or ap_reg_ppiten_pp1_it2 or exitcond1_fu_238_p2 or ap_sig_ioackin_mem0_AWREADY or ap_reg_ppstg_exitcond2_reg_460_pp1_it1)
begin
    if ((((ap_ST_st3_fsm_2 == ap_CS_fsm) & (ap_const_lv1_0 == exitcond1_fu_238_p2) & ~(~(ap_const_lv1_0 == exitcond1_fu_238_p2) & (ap_const_logic_0 == ap_sig_ioackin_mem0_AWREADY))) | ((ap_const_logic_1 == ap_reg_ppiten_pp1_it2) & ~(ap_sig_bdd_193 & (ap_const_logic_1 == ap_reg_ppiten_pp1_it1)) & (ap_const_lv1_0 == ap_reg_ppstg_exitcond2_reg_460_pp1_it1)))) begin
        buf_we0 = ap_const_logic_1;
    end else begin
        buf_we0 = ap_const_logic_0;
    end
end

/// indvar8_phi_fu_196_p4 assign process. ///
always @ (ap_CS_fsm or indvar8_reg_192 or exitcond2_reg_460 or ap_reg_ppiten_pp1_it1 or indvar_next9_reg_464)
begin
    if (((ap_ST_pp1_stg0_fsm_26 == ap_CS_fsm) & (exitcond2_reg_460 == ap_const_lv1_0) & (ap_const_logic_1 == ap_reg_ppiten_pp1_it1))) begin
        indvar8_phi_fu_196_p4 = indvar_next9_reg_464;
    end else begin
        indvar8_phi_fu_196_p4 = indvar8_reg_192;
    end
end

/// mem0_ARADDR assign process. ///
always @ (ap_CS_fsm or tmp_5_fu_316_p1 or tmp_6_fu_326_p1 or ap_reg_ioackin_mem0_ARREADY or ap_sig_bdd_421)
begin
    if ((ap_const_logic_0 == ap_reg_ioackin_mem0_ARREADY)) begin
        if ((ap_ST_st12_fsm_9 == ap_CS_fsm)) begin
            mem0_ARADDR = tmp_6_fu_326_p1;
        end else if ((ap_ST_st11_fsm_8 == ap_CS_fsm)) begin
            mem0_ARADDR = tmp_5_fu_316_p1;
        end else if (ap_sig_bdd_421) begin
            mem0_ARADDR = ap_const_lv32_0;
        end else begin
            mem0_ARADDR = 'bx;
        end
    end else begin
        mem0_ARADDR = 'bx;
    end
end

/// mem0_ARLEN assign process. ///
always @ (ap_CS_fsm or exitcond_fu_300_p2 or ap_reg_ioackin_mem0_ARREADY)
begin
    if ((((ap_ST_st11_fsm_8 == ap_CS_fsm) & (ap_const_logic_0 == ap_reg_ioackin_mem0_ARREADY)) | ((ap_ST_st12_fsm_9 == ap_CS_fsm) & (ap_const_logic_0 == ap_reg_ioackin_mem0_ARREADY)))) begin
        mem0_ARLEN = ap_const_lv32_1;
    end else if (((ap_ST_st10_fsm_7 == ap_CS_fsm) & ~(ap_const_lv1_0 == exitcond_fu_300_p2) & (ap_const_logic_0 == ap_reg_ioackin_mem0_ARREADY))) begin
        mem0_ARLEN = ap_const_lv32_20;
    end else begin
        mem0_ARLEN = 'bx;
    end
end

/// mem0_ARVALID assign process. ///
always @ (ap_CS_fsm or exitcond_fu_300_p2 or ap_reg_ioackin_mem0_ARREADY)
begin
    if ((((ap_ST_st10_fsm_7 == ap_CS_fsm) & ~(ap_const_lv1_0 == exitcond_fu_300_p2) & (ap_const_logic_0 == ap_reg_ioackin_mem0_ARREADY)) | ((ap_ST_st11_fsm_8 == ap_CS_fsm) & (ap_const_logic_0 == ap_reg_ioackin_mem0_ARREADY)) | ((ap_ST_st12_fsm_9 == ap_CS_fsm) & (ap_const_logic_0 == ap_reg_ioackin_mem0_ARREADY)))) begin
        mem0_ARVALID = ap_const_logic_1;
    end else begin
        mem0_ARVALID = ap_const_logic_0;
    end
end

/// mem0_AWADDR assign process. ///
always @ (ap_CS_fsm or mem0_addr_reg_433 or tmp_10_fu_266_p1 or ap_reg_ioackin_mem0_AWREADY or ap_sig_bdd_395)
begin
    if ((ap_const_logic_0 == ap_reg_ioackin_mem0_AWREADY)) begin
        if ((ap_ST_st32_fsm_27 == ap_CS_fsm)) begin
            mem0_AWADDR = ap_const_lv64_20;
        end else if ((ap_ST_st19_fsm_16 == ap_CS_fsm)) begin
            mem0_AWADDR = mem0_addr_reg_433;
        end else if (ap_sig_bdd_395) begin
            mem0_AWADDR = tmp_10_fu_266_p1;
        end else begin
            mem0_AWADDR = 'bx;
        end
    end else begin
        mem0_AWADDR = 'bx;
    end
end

/// mem0_AWLEN assign process. ///
always @ (ap_CS_fsm or exitcond1_fu_238_p2 or ap_reg_ioackin_mem0_AWREADY)
begin
    if (((ap_ST_st19_fsm_16 == ap_CS_fsm) & (ap_const_logic_0 == ap_reg_ioackin_mem0_AWREADY))) begin
        mem0_AWLEN = ap_const_lv32_1;
    end else if ((((ap_ST_st3_fsm_2 == ap_CS_fsm) & ~(ap_const_lv1_0 == exitcond1_fu_238_p2) & (ap_const_logic_0 == ap_reg_ioackin_mem0_AWREADY)) | ((ap_ST_st32_fsm_27 == ap_CS_fsm) & (ap_const_logic_0 == ap_reg_ioackin_mem0_AWREADY)))) begin
        mem0_AWLEN = ap_const_lv32_20;
    end else begin
        mem0_AWLEN = 'bx;
    end
end

/// mem0_AWVALID assign process. ///
always @ (ap_CS_fsm or exitcond1_fu_238_p2 or ap_reg_ioackin_mem0_AWREADY)
begin
    if ((((ap_ST_st3_fsm_2 == ap_CS_fsm) & ~(ap_const_lv1_0 == exitcond1_fu_238_p2) & (ap_const_logic_0 == ap_reg_ioackin_mem0_AWREADY)) | ((ap_ST_st19_fsm_16 == ap_CS_fsm) & (ap_const_logic_0 == ap_reg_ioackin_mem0_AWREADY)) | ((ap_ST_st32_fsm_27 == ap_CS_fsm) & (ap_const_logic_0 == ap_reg_ioackin_mem0_AWREADY)))) begin
        mem0_AWVALID = ap_const_logic_1;
    end else begin
        mem0_AWVALID = ap_const_logic_0;
    end
end

/// mem0_BREADY assign process. ///
always @ (ap_CS_fsm or mem0_BVALID)
begin
    if ((((ap_ST_st9_fsm_6 == ap_CS_fsm) & ~(mem0_BVALID == ap_const_logic_0)) | (~(mem0_BVALID == ap_const_logic_0) & (ap_ST_st23_fsm_20 == ap_CS_fsm)) | (~(mem0_BVALID == ap_const_logic_0) & (ap_ST_st38_fsm_31 == ap_CS_fsm)))) begin
        mem0_BREADY = ap_const_logic_1;
    end else begin
        mem0_BREADY = ap_const_logic_0;
    end
end

/// mem0_RREADY assign process. ///
always @ (ap_CS_fsm or mem0_RVALID or exitcond2_reg_460 or ap_sig_bdd_193 or ap_reg_ppiten_pp1_it1)
begin
    if ((((ap_ST_st17_fsm_14 == ap_CS_fsm) & ~(mem0_RVALID == ap_const_logic_0)) | (~(mem0_RVALID == ap_const_logic_0) & (ap_ST_st18_fsm_15 == ap_CS_fsm)) | ((ap_ST_pp1_stg0_fsm_26 == ap_CS_fsm) & (exitcond2_reg_460 == ap_const_lv1_0) & (ap_const_logic_1 == ap_reg_ppiten_pp1_it1) & ~(ap_sig_bdd_193 & (ap_const_logic_1 == ap_reg_ppiten_pp1_it1))))) begin
        mem0_RREADY = ap_const_logic_1;
    end else begin
        mem0_RREADY = ap_const_logic_0;
    end
end

/// mem0_WDATA assign process. ///
always @ (ap_CS_fsm or reg_216 or ap_reg_ppstg_exitcond4_reg_406_pp0_it1 or ap_reg_ppiten_pp0_it2 or ap_reg_ppstg_exitcond3_reg_474_pp2_it1 or ap_reg_ppiten_pp2_it2 or result_reg_455 or ap_reg_ioackin_mem0_WREADY)
begin
    if (((ap_const_logic_0 == ap_reg_ioackin_mem0_WREADY) & (ap_ST_st20_fsm_17 == ap_CS_fsm))) begin
        mem0_WDATA = result_reg_455;
    end else if ((((ap_const_lv1_0 == ap_reg_ppstg_exitcond4_reg_406_pp0_it1) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it2) & (ap_const_logic_0 == ap_reg_ioackin_mem0_WREADY)) | ((ap_const_lv1_0 == ap_reg_ppstg_exitcond3_reg_474_pp2_it1) & (ap_const_logic_1 == ap_reg_ppiten_pp2_it2) & (ap_const_logic_0 == ap_reg_ioackin_mem0_WREADY)))) begin
        mem0_WDATA = reg_216;
    end else begin
        mem0_WDATA = 'bx;
    end
end

/// mem0_WVALID assign process. ///
always @ (ap_CS_fsm or ap_reg_ppstg_exitcond4_reg_406_pp0_it1 or ap_reg_ppiten_pp0_it2 or ap_reg_ppstg_exitcond3_reg_474_pp2_it1 or ap_reg_ppiten_pp2_it2 or ap_reg_ioackin_mem0_WREADY)
begin
    if ((((ap_const_lv1_0 == ap_reg_ppstg_exitcond4_reg_406_pp0_it1) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it2) & (ap_const_logic_0 == ap_reg_ioackin_mem0_WREADY)) | ((ap_const_logic_0 == ap_reg_ioackin_mem0_WREADY) & (ap_ST_st20_fsm_17 == ap_CS_fsm)) | ((ap_const_lv1_0 == ap_reg_ppstg_exitcond3_reg_474_pp2_it1) & (ap_const_logic_1 == ap_reg_ppiten_pp2_it2) & (ap_const_logic_0 == ap_reg_ioackin_mem0_WREADY)))) begin
        mem0_WVALID = ap_const_logic_1;
    end else begin
        mem0_WVALID = ap_const_logic_0;
    end
end
/// the next state (ap_NS_fsm) of the state machine. ///
always @ (ap_start or ap_CS_fsm or mem0_RVALID or mem0_BVALID or ap_reg_ppiten_pp1_it0 or ap_sig_bdd_193 or ap_reg_ppiten_pp1_it1 or ap_reg_ppiten_pp1_it2 or ap_reg_ppiten_pp0_it0 or ap_reg_ppiten_pp0_it1 or ap_reg_ppstg_exitcond4_reg_406_pp0_it1 or ap_sig_ioackin_mem0_WREADY or ap_reg_ppiten_pp0_it2 or ap_reg_ppiten_pp2_it0 or ap_reg_ppiten_pp2_it1 or ap_reg_ppstg_exitcond3_reg_474_pp2_it1 or ap_reg_ppiten_pp2_it2 or exitcond1_fu_238_p2 or ap_sig_ioackin_mem0_AWREADY or exitcond4_fu_277_p2 or exitcond_fu_300_p2 or ap_sig_ioackin_mem0_ARREADY or exitcond2_fu_348_p2 or exitcond3_fu_372_p2 or tmp_fu_226_p3)
begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 :
        begin
            if (~(ap_start == ap_const_logic_0)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_st2_fsm_1 :
        begin
            if (~(ap_const_lv1_0 == tmp_fu_226_p3)) begin
                ap_NS_fsm = ap_ST_st10_fsm_7;
            end else begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end
        end
        ap_ST_st3_fsm_2 :
        begin
            if ((~(ap_const_lv1_0 == exitcond1_fu_238_p2) & ~(~(ap_const_lv1_0 == exitcond1_fu_238_p2) & (ap_const_logic_0 == ap_sig_ioackin_mem0_AWREADY)))) begin
                ap_NS_fsm = ap_ST_pp0_stg0_fsm_3;
            end else if (((ap_const_lv1_0 == exitcond1_fu_238_p2) & ~(~(ap_const_lv1_0 == exitcond1_fu_238_p2) & (ap_const_logic_0 == ap_sig_ioackin_mem0_AWREADY)))) begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end else begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end
        end
        ap_ST_pp0_stg0_fsm_3 :
        begin
            if ((~((ap_const_logic_1 == ap_reg_ppiten_pp0_it2) & ~((ap_const_lv1_0 == ap_reg_ppstg_exitcond4_reg_406_pp0_it1) & (ap_const_logic_0 == ap_sig_ioackin_mem0_WREADY) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it2)) & ~(ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) & ~((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ~((ap_const_lv1_0 == ap_reg_ppstg_exitcond4_reg_406_pp0_it1) & (ap_const_logic_0 == ap_sig_ioackin_mem0_WREADY) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it2)) & ~(ap_const_lv1_0 == exitcond4_fu_277_p2) & ~(ap_const_logic_1 == ap_reg_ppiten_pp0_it1)))) begin
                ap_NS_fsm = ap_ST_pp0_stg0_fsm_3;
            end else if ((((ap_const_logic_1 == ap_reg_ppiten_pp0_it2) & ~((ap_const_lv1_0 == ap_reg_ppstg_exitcond4_reg_406_pp0_it1) & (ap_const_logic_0 == ap_sig_ioackin_mem0_WREADY) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it2)) & ~(ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) | ((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ~((ap_const_lv1_0 == ap_reg_ppstg_exitcond4_reg_406_pp0_it1) & (ap_const_logic_0 == ap_sig_ioackin_mem0_WREADY) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it2)) & ~(ap_const_lv1_0 == exitcond4_fu_277_p2) & ~(ap_const_logic_1 == ap_reg_ppiten_pp0_it1)))) begin
                ap_NS_fsm = ap_ST_st7_fsm_4;
            end else begin
                ap_NS_fsm = ap_ST_pp0_stg0_fsm_3;
            end
        end
        ap_ST_st7_fsm_4 :
        begin
            ap_NS_fsm = ap_ST_st8_fsm_5;
        end
        ap_ST_st8_fsm_5 :
        begin
            ap_NS_fsm = ap_ST_st9_fsm_6;
        end
        ap_ST_st9_fsm_6 :
        begin
            if (~(mem0_BVALID == ap_const_logic_0)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st9_fsm_6;
            end
        end
        ap_ST_st10_fsm_7 :
        begin
            if ((~(ap_const_lv1_0 == exitcond_fu_300_p2) & ~(~(ap_const_lv1_0 == exitcond_fu_300_p2) & (ap_const_logic_0 == ap_sig_ioackin_mem0_ARREADY)))) begin
                ap_NS_fsm = ap_ST_st24_fsm_21;
            end else if (((ap_const_lv1_0 == exitcond_fu_300_p2) & ~(~(ap_const_lv1_0 == exitcond_fu_300_p2) & (ap_const_logic_0 == ap_sig_ioackin_mem0_ARREADY)))) begin
                ap_NS_fsm = ap_ST_st11_fsm_8;
            end else begin
                ap_NS_fsm = ap_ST_st10_fsm_7;
            end
        end
        ap_ST_st11_fsm_8 :
        begin
            if (~(ap_const_logic_0 == ap_sig_ioackin_mem0_ARREADY)) begin
                ap_NS_fsm = ap_ST_st12_fsm_9;
            end else begin
                ap_NS_fsm = ap_ST_st11_fsm_8;
            end
        end
        ap_ST_st12_fsm_9 :
        begin
            if (~(ap_const_logic_0 == ap_sig_ioackin_mem0_ARREADY)) begin
                ap_NS_fsm = ap_ST_st13_fsm_10;
            end else begin
                ap_NS_fsm = ap_ST_st12_fsm_9;
            end
        end
        ap_ST_st13_fsm_10 :
        begin
            ap_NS_fsm = ap_ST_st14_fsm_11;
        end
        ap_ST_st14_fsm_11 :
        begin
            ap_NS_fsm = ap_ST_st15_fsm_12;
        end
        ap_ST_st15_fsm_12 :
        begin
            ap_NS_fsm = ap_ST_st16_fsm_13;
        end
        ap_ST_st16_fsm_13 :
        begin
            ap_NS_fsm = ap_ST_st17_fsm_14;
        end
        ap_ST_st17_fsm_14 :
        begin
            if (~(mem0_RVALID == ap_const_logic_0)) begin
                ap_NS_fsm = ap_ST_st18_fsm_15;
            end else begin
                ap_NS_fsm = ap_ST_st17_fsm_14;
            end
        end
        ap_ST_st18_fsm_15 :
        begin
            if (~(mem0_RVALID == ap_const_logic_0)) begin
                ap_NS_fsm = ap_ST_st19_fsm_16;
            end else begin
                ap_NS_fsm = ap_ST_st18_fsm_15;
            end
        end
        ap_ST_st19_fsm_16 :
        begin
            if (~(ap_const_logic_0 == ap_sig_ioackin_mem0_AWREADY)) begin
                ap_NS_fsm = ap_ST_st20_fsm_17;
            end else begin
                ap_NS_fsm = ap_ST_st19_fsm_16;
            end
        end
        ap_ST_st20_fsm_17 :
        begin
            if (~(ap_const_logic_0 == ap_sig_ioackin_mem0_WREADY)) begin
                ap_NS_fsm = ap_ST_st21_fsm_18;
            end else begin
                ap_NS_fsm = ap_ST_st20_fsm_17;
            end
        end
        ap_ST_st21_fsm_18 :
        begin
            ap_NS_fsm = ap_ST_st22_fsm_19;
        end
        ap_ST_st22_fsm_19 :
        begin
            ap_NS_fsm = ap_ST_st23_fsm_20;
        end
        ap_ST_st23_fsm_20 :
        begin
            if (~(mem0_BVALID == ap_const_logic_0)) begin
                ap_NS_fsm = ap_ST_st10_fsm_7;
            end else begin
                ap_NS_fsm = ap_ST_st23_fsm_20;
            end
        end
        ap_ST_st24_fsm_21 :
        begin
            ap_NS_fsm = ap_ST_st25_fsm_22;
        end
        ap_ST_st25_fsm_22 :
        begin
            ap_NS_fsm = ap_ST_st26_fsm_23;
        end
        ap_ST_st26_fsm_23 :
        begin
            ap_NS_fsm = ap_ST_st27_fsm_24;
        end
        ap_ST_st27_fsm_24 :
        begin
            ap_NS_fsm = ap_ST_st28_fsm_25;
        end
        ap_ST_st28_fsm_25 :
        begin
            ap_NS_fsm = ap_ST_pp1_stg0_fsm_26;
        end
        ap_ST_pp1_stg0_fsm_26 :
        begin
            if ((~((ap_const_logic_1 == ap_reg_ppiten_pp1_it2) & ~(ap_sig_bdd_193 & (ap_const_logic_1 == ap_reg_ppiten_pp1_it1)) & ~(ap_const_logic_1 == ap_reg_ppiten_pp1_it1)) & ~((ap_const_logic_1 == ap_reg_ppiten_pp1_it0) & ~(ap_sig_bdd_193 & (ap_const_logic_1 == ap_reg_ppiten_pp1_it1)) & ~(ap_const_lv1_0 == exitcond2_fu_348_p2) & ~(ap_const_logic_1 == ap_reg_ppiten_pp1_it1)))) begin
                ap_NS_fsm = ap_ST_pp1_stg0_fsm_26;
            end else if ((((ap_const_logic_1 == ap_reg_ppiten_pp1_it2) & ~(ap_sig_bdd_193 & (ap_const_logic_1 == ap_reg_ppiten_pp1_it1)) & ~(ap_const_logic_1 == ap_reg_ppiten_pp1_it1)) | ((ap_const_logic_1 == ap_reg_ppiten_pp1_it0) & ~(ap_sig_bdd_193 & (ap_const_logic_1 == ap_reg_ppiten_pp1_it1)) & ~(ap_const_lv1_0 == exitcond2_fu_348_p2) & ~(ap_const_logic_1 == ap_reg_ppiten_pp1_it1)))) begin
                ap_NS_fsm = ap_ST_st32_fsm_27;
            end else begin
                ap_NS_fsm = ap_ST_pp1_stg0_fsm_26;
            end
        end
        ap_ST_st32_fsm_27 :
        begin
            if (~(ap_const_logic_0 == ap_sig_ioackin_mem0_AWREADY)) begin
                ap_NS_fsm = ap_ST_pp2_stg0_fsm_28;
            end else begin
                ap_NS_fsm = ap_ST_st32_fsm_27;
            end
        end
        ap_ST_pp2_stg0_fsm_28 :
        begin
            if ((~((ap_const_logic_1 == ap_reg_ppiten_pp2_it2) & ~((ap_const_logic_0 == ap_sig_ioackin_mem0_WREADY) & (ap_const_lv1_0 == ap_reg_ppstg_exitcond3_reg_474_pp2_it1) & (ap_const_logic_1 == ap_reg_ppiten_pp2_it2)) & ~(ap_const_logic_1 == ap_reg_ppiten_pp2_it1)) & ~((ap_const_logic_1 == ap_reg_ppiten_pp2_it0) & ~((ap_const_logic_0 == ap_sig_ioackin_mem0_WREADY) & (ap_const_lv1_0 == ap_reg_ppstg_exitcond3_reg_474_pp2_it1) & (ap_const_logic_1 == ap_reg_ppiten_pp2_it2)) & ~(ap_const_lv1_0 == exitcond3_fu_372_p2) & ~(ap_const_logic_1 == ap_reg_ppiten_pp2_it1)))) begin
                ap_NS_fsm = ap_ST_pp2_stg0_fsm_28;
            end else if ((((ap_const_logic_1 == ap_reg_ppiten_pp2_it2) & ~((ap_const_logic_0 == ap_sig_ioackin_mem0_WREADY) & (ap_const_lv1_0 == ap_reg_ppstg_exitcond3_reg_474_pp2_it1) & (ap_const_logic_1 == ap_reg_ppiten_pp2_it2)) & ~(ap_const_logic_1 == ap_reg_ppiten_pp2_it1)) | ((ap_const_logic_1 == ap_reg_ppiten_pp2_it0) & ~((ap_const_logic_0 == ap_sig_ioackin_mem0_WREADY) & (ap_const_lv1_0 == ap_reg_ppstg_exitcond3_reg_474_pp2_it1) & (ap_const_logic_1 == ap_reg_ppiten_pp2_it2)) & ~(ap_const_lv1_0 == exitcond3_fu_372_p2) & ~(ap_const_logic_1 == ap_reg_ppiten_pp2_it1)))) begin
                ap_NS_fsm = ap_ST_st36_fsm_29;
            end else begin
                ap_NS_fsm = ap_ST_pp2_stg0_fsm_28;
            end
        end
        ap_ST_st36_fsm_29 :
        begin
            ap_NS_fsm = ap_ST_st37_fsm_30;
        end
        ap_ST_st37_fsm_30 :
        begin
            ap_NS_fsm = ap_ST_st38_fsm_31;
        end
        ap_ST_st38_fsm_31 :
        begin
            if (~(mem0_BVALID == ap_const_logic_0)) begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end else begin
                ap_NS_fsm = ap_ST_st38_fsm_31;
            end
        end
        default :
        begin
            ap_NS_fsm = 'bx;
        end
    endcase
end


/// ap_rst_n_inv assign process. ///
always @ (ap_rst_n)
begin
    ap_rst_n_inv = ~ap_rst_n;
end

/// ap_sig_bdd_193 assign process. ///
always @ (mem0_RVALID or exitcond2_reg_460)
begin
    ap_sig_bdd_193 = ((mem0_RVALID == ap_const_logic_0) & (exitcond2_reg_460 == ap_const_lv1_0));
end

/// ap_sig_bdd_395 assign process. ///
always @ (ap_CS_fsm or exitcond1_fu_238_p2)
begin
    ap_sig_bdd_395 = ((ap_ST_st3_fsm_2 == ap_CS_fsm) & ~(ap_const_lv1_0 == exitcond1_fu_238_p2));
end

/// ap_sig_bdd_421 assign process. ///
always @ (ap_CS_fsm or exitcond_fu_300_p2)
begin
    ap_sig_bdd_421 = ((ap_ST_st10_fsm_7 == ap_CS_fsm) & ~(ap_const_lv1_0 == exitcond_fu_300_p2));
end
assign exitcond1_fu_238_p2 = (k_reg_158 == ap_const_lv6_20? 1'b1: 1'b0);
assign exitcond2_fu_348_p2 = (indvar8_phi_fu_196_p4 == ap_const_lv6_20? 1'b1: 1'b0);
assign exitcond3_fu_372_p2 = (indvar1_reg_204 == ap_const_lv6_20? 1'b1: 1'b0);
assign exitcond4_fu_277_p2 = (indvar_reg_169 == ap_const_lv6_20? 1'b1: 1'b0);
assign exitcond_fu_300_p2 = (i1_reg_180 == ap_const_lv8_80? 1'b1: 1'b0);
assign hls_axi_bus_test_mem0_m_axi_U_ap_dummy_ce = ap_const_logic_1;
assign i_1_fu_337_p2 = (ap_const_lv8_1 + i1_reg_180);
assign i_2_fu_294_p2 = (i_reg_146 + ap_const_lv8_20);
assign indvar_next1_fu_378_p2 = (indvar1_reg_204 + ap_const_lv6_1);
assign indvar_next9_fu_354_p2 = (indvar8_phi_fu_196_p4 + ap_const_lv6_1);
assign indvar_next_fu_283_p2 = (indvar_reg_169 + ap_const_lv6_1);
assign k_1_fu_244_p2 = (k_reg_158 + ap_const_lv6_1);
assign k_cast8_fu_234_p1 = k_reg_158;
assign mem0_ARBURST = ap_const_lv2_0;
assign mem0_ARCACHE = ap_const_lv4_0;
assign mem0_ARID = ap_const_lv1_0;
assign mem0_ARLOCK = ap_const_lv2_0;
assign mem0_ARPROT = ap_const_lv3_0;
assign mem0_ARQOS = ap_const_lv4_0;
assign mem0_ARREGION = ap_const_lv4_0;
assign mem0_ARSIZE = ap_const_lv3_0;
assign mem0_ARUSER = ap_const_lv1_0;
assign mem0_AWBURST = ap_const_lv2_0;
assign mem0_AWCACHE = ap_const_lv4_0;
assign mem0_AWID = ap_const_lv1_0;
assign mem0_AWLOCK = ap_const_lv2_0;
assign mem0_AWPROT = ap_const_lv3_0;
assign mem0_AWQOS = ap_const_lv4_0;
assign mem0_AWREGION = ap_const_lv4_0;
assign mem0_AWSIZE = ap_const_lv3_0;
assign mem0_AWUSER = ap_const_lv1_0;
assign mem0_WID = ap_const_lv1_0;
assign mem0_WLAST = ap_const_logic_0;
assign mem0_WSTRB = ap_const_lv4_F;
assign mem0_WUSER = ap_const_lv1_0;
assign result_fu_343_p2 = (data_1_reg_450 + reg_221);
assign tmp_10_fu_266_p1 = i_reg_146;
assign tmp_1_cast_fu_256_p1 = tmp_1_fu_250_p2;
assign tmp_1_fu_250_p2 = (i_reg_146 + k_cast8_fu_234_p1);
assign tmp_2_fu_261_p1 = k_reg_158;
assign tmp_3_fu_360_p1 = ap_reg_ppstg_indvar8_reg_192_pp1_it1;
assign tmp_4_fu_310_p2 = ($signed(ap_const_lv7_7F) + $signed(tmp_8_fu_306_p1));
assign tmp_5_fu_316_p1 = tmp_4_reg_428;
assign tmp_6_fu_326_p1 = i1_reg_180;
assign tmp_7_fu_384_p1 = indvar1_reg_204;
assign tmp_8_fu_306_p1 = i1_reg_180[6:0];
assign tmp_9_fu_289_p1 = indvar_reg_169;
assign tmp_fu_226_p3 = i_reg_146[ap_const_lv32_7];
always @ (posedge ap_clk)
begin
    mem0_addr_reg_433[31:7] <= 25'b0000000000000000000000000;
end



endmodule //hls_axi_bus_test

